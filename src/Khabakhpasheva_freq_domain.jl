module Khabakhpasheva_freq_domain

using Gridap
using Gridap.Geometry
using Gridap.FESpaces
using Gridap.CellData
using Plots
using Parameters

export run_Khabakhpasheva_freq_domain
export Khabakhpasheva_freq_domain_params

@with_kw struct Khabakhpasheva_freq_domain_params
  name::String = "KhabakhpashevaFreqDomain"
  nx::Int = 20
  ny::Int = 5
  order::Int = 4
  Œæ::Float64 = 0.0
  vtk_output::Bool = true
end

function run_Khabakhpasheva_freq_domain(params::Khabakhpasheva_freq_domain_params)

  # Unpack input parameters
  @unpack name, nx, ny, order, Œæ, vtk_output = params

  # Fixed parameters
  Lb = 12.5
  m = 8.36
  EI‚ÇÅ = 47100.0
  EI‚ÇÇ = 471.0
  Œ≤ = 0.2
  H = 1.1
  Œ± = 0.249

  # Domain size
  Ld = Lb # damping zone length
  LŒ© = 2Ld + 2Lb
  x‚ÇÄ = 0.0
  xd·µ¢‚Çô = x‚ÇÄ + Ld
  xb‚ÇÄ = xd·µ¢‚Çô + Lb/2
  xb‚±º = xb‚ÇÄ + Œ≤*Lb
  xb‚ÇÅ = xb‚ÇÄ + Lb
  xd‚Çí·µ§‚Çú = LŒ© - Ld
  @show Ld
  @show LŒ©
  @show x‚ÇÄ
  @show xd·µ¢‚Çô
  @show xb‚ÇÄ
  @show xb‚±º
  @show xb‚ÇÅ
  @show xd‚Çí·µ§‚Çú

  # Physics
  g = 9.81
  œÅ = 1025
  d‚ÇÄ = m/œÅ
  a‚ÇÅ = EI‚ÇÅ/œÅ
  a‚ÇÇ = EI‚ÇÇ/œÅ
  k·µ£ = Œæ*a‚ÇÅ/Lb

  # wave properties
  Œª = Œ±*Lb
  k = 2œÄ/Œª
  œâ = sqrt(g*k*tanh(k*H))
  T = 2œÄ/œâ
  Œ∑‚ÇÄ = 0.01
  Œ∑·µ¢‚Çô(x) = Œ∑‚ÇÄ*exp(im*k*x[1])
  œï·µ¢‚Çô(x) = -im*(Œ∑‚ÇÄ*œâ/k)*(cosh(k*x[2]) / sinh(k*H))*exp(im*k*x[1])
  v·µ¢‚Çô(x) = (Œ∑‚ÇÄ*œâ)*(cosh(k*x[2]) / sinh(k*H))*exp(im*k*x[1])
  vz·µ¢‚Çô(x) = -im*œâ*Œ∑‚ÇÄ*exp(im*k*x[1])

  # Numerics constants
  nx_total = Int(ceil(nx/Œ≤)*ceil(LŒ©/Lb))
  h = LŒ© / nx_total
  Œ≥ = 1.0*order*(order-1)/h
  Œ≤‚Çï = 0.5
  Œ±‚Çï = -im*œâ/g * (1-Œ≤‚Çï)/Œ≤‚Çï
  @show nx_total
  @show h
  @show Œ≤‚Çï
  @show Œ±‚Çï

  # Damping
  Œº‚ÇÄ = 2.5
  Œº‚ÇÅ·µ¢‚Çô(x) = Œº‚ÇÄ*(1.0 - sin(œÄ/2*(x[1])/Ld))
  Œº‚ÇÅ‚Çí·µ§‚Çú(x) = Œº‚ÇÄ*(1.0 - cos(œÄ/2*(x[1]-xd‚Çí·µ§‚Çú)/Ld))
  Œº‚ÇÇ·µ¢‚Çô(x) = Œº‚ÇÅ·µ¢‚Çô(x)*k
  Œº‚ÇÇ‚Çí·µ§‚Çú(x) = Œº‚ÇÅ‚Çí·µ§‚Çú(x)*k
  Œ∑d(x) = Œº‚ÇÇ·µ¢‚Çô(x)*Œ∑·µ¢‚Çô(x)
  ‚àá‚Çôœïd(x) = Œº‚ÇÅ·µ¢‚Çô(x)*vz·µ¢‚Çô(x)

  # Fluid model
  domain = (x‚ÇÄ, LŒ©, 0.0, H)
  partition = (nx_total,ny)
  function f_y(x)
    if x == H
        return H
    end
    i = x / (H/ny)
    return H-H/(2.5^i)
  end
  map(x) = VectorValue(x[1], f_y(x[2]))
  ùíØ_Œ© = CartesianDiscreteModel(domain,partition,map=map)

  # Labelling
  labels_Œ© = get_face_labeling(ùíØ_Œ©)
  add_tag_from_tags!(labels_Œ©,"surface",[3,4,6])   # assign the label "surface" to the entity 3,4 and 6 (top corners and top side)
  add_tag_from_tags!(labels_Œ©,"bottom",[1,2,5])    # assign the label "bottom" to the entity 1,2 and 5 (bottom corners and bottom side)
  add_tag_from_tags!(labels_Œ©,"inlet",[7])         # assign the label "inlet" to the entity 7 (left side)
  add_tag_from_tags!(labels_Œ©,"outlet",[8])        # assign the label "outlet" to the entity 8 (right side)
  add_tag_from_tags!(labels_Œ©, "water", [9])       # assign the label "water" to the entity 9 (interior)

  # Triangulations
  Œ© = Interior(ùíØ_Œ©)
  Œì = Boundary(ùíØ_Œ©,tags="surface")
  Œìin = Boundary(ùíØ_Œ©,tags="inlet")

  # Auxiliar functions
  function is_beam1(xs) # Check if an element is inside the beam1
    n = length(xs)
    x = (1/n)*sum(xs)
    (xb‚ÇÄ <= x[1] <= xb‚±º ) * ( x[2] ‚âà H)
  end
  function is_beam2(xs) # Check if an element is inside the beam2
    n = length(xs)
    x = (1/n)*sum(xs)
    (xb‚±º <= x[1] <= xb‚ÇÅ ) * ( x[2] ‚âà H)
  end
  function is_damping1(xs) # Check if an element is inside the damping zone 1
    n = length(xs)
    x = (1/n)*sum(xs)
    (x‚ÇÄ <= x[1] <= xd·µ¢‚Çô ) * ( x[2] ‚âà H)
  end
  function is_damping2(xs) # Check if an element is inside the damping zone 2
    n = length(xs)
    x = (1/n)*sum(xs)
    (xd‚Çí·µ§‚Çú <= x[1] ) * ( x[2] ‚âà H)
  end
  function is_beam_boundary(xs) # Check if an element is on the beam boundary
    is_on_xb‚ÇÄ = [x[1]‚âàxb‚ÇÄ for x in xs] # array of booleans of size the number of points in an element (for points, it will be an array of size 1)
    is_on_xb‚ÇÅ = [x[1]‚âàxb‚ÇÅ for x in xs]
    element_on_xb‚ÇÄ = minimum(is_on_xb‚ÇÄ) # Boolean with "true" if at least one entry is true, "false" otherwise.
    element_on_xb‚ÇÅ = minimum(is_on_xb‚ÇÅ)
    element_on_xb‚ÇÄ | element_on_xb‚ÇÅ # Return "true" if any of the two cases is true
  end
  function is_a_joint(xs) # Check if an element is a joint
    is_on_xb‚±º = [x[1]‚âàxb‚±º && x[2]‚âàH for x in xs] # array of booleans of size the number of points in an element (for points, it will be an array of size 1)
    element_on_xb‚±º = minimum(is_on_xb‚±º) # Boolean with "true" if at least one entry is true, "false" otherwise.
    element_on_xb‚±º
  end

  # Beam triangulations
  xŒì = get_cell_coordinates(Œì)
  Œìb1_to_Œì_mask = lazy_map(is_beam1,xŒì)
  Œìb2_to_Œì_mask = lazy_map(is_beam2,xŒì)
  Œìd1_to_Œì_mask = lazy_map(is_damping1,xŒì)
  Œìd2_to_Œì_mask = lazy_map(is_damping2,xŒì)
  Œìb1_to_Œì = findall(Œìb1_to_Œì_mask)
  Œìb2_to_Œì = findall(Œìb2_to_Œì_mask)
  Œìd1_to_Œì = findall(Œìd1_to_Œì_mask)
  Œìd2_to_Œì = findall(Œìd2_to_Œì_mask)
  Œìf_to_Œì = findall(!,Œìb1_to_Œì_mask .| Œìb2_to_Œì_mask .| Œìd1_to_Œì_mask .| Œìd2_to_Œì_mask)
  ŒìŒ∑_to_Œì = findall(Œìb1_to_Œì_mask .| Œìb2_to_Œì_mask )
  ŒìŒ∫_to_Œì = findall(!,Œìb1_to_Œì_mask .| Œìb2_to_Œì_mask )
  Œìb1 = Triangulation(Œì,Œìb1_to_Œì)
  Œìb2 = Triangulation(Œì,Œìb2_to_Œì)
  Œìd1 = Triangulation(Œì,Œìd1_to_Œì)
  Œìd2 = Triangulation(Œì,Œìd2_to_Œì)
  Œìfs = Triangulation(Œì,Œìf_to_Œì)
  ŒìŒ∑ = Triangulation(Œì,ŒìŒ∑_to_Œì)
  ŒìŒ∫ = Triangulation(Œì,ŒìŒ∫_to_Œì)
  Œõb1 = Skeleton(Œìb1)
  Œõb2 = Skeleton(Œìb2)

  # Construct the mask for the joint
  Œì_mask_in_Œ©_dim_0 = get_face_mask(labels_Œ©,"surface",0)
  grid_dim_0_Œì = GridPortion(Grid(ReferenceFE{0},ùíØ_Œ©),Œì_mask_in_Œ©_dim_0)
  xŒì_dim_0 = get_cell_coordinates(grid_dim_0_Œì)
  Œõj_to_Œì_mask = lazy_map(is_a_joint,xŒì_dim_0)
  Œõj = Skeleton(Œì,Œõj_to_Œì_mask)

  if vtk_output == true
    filename = "data/VTKOutput/Khabakhpasheva_freq_domain/"*name
    writevtk(Œ©,filename*"_O")
    writevtk(Œì,filename*"_G")
    writevtk(Œìb1,filename*"_Gb1")
    writevtk(Œìb2,filename*"_Gb2")
    writevtk(Œìd1,filename*"_Gd1")
    writevtk(Œìd2,filename*"_Gd2")
    writevtk(Œìfs,filename*"_Gfs")
    writevtk(Œõb1,filename*"_L1")
    writevtk(Œõb2,filename*"_L2")
    writevtk(Œõj,filename*"_Lj")
  end

  # Measures
  degree = 2*order
  dŒ© = Measure(Œ©,degree)
  dŒìb1 = Measure(Œìb1,degree)
  dŒìb2 = Measure(Œìb2,degree)
  dŒìd1 = Measure(Œìd1,degree)
  dŒìd2 = Measure(Œìd2,degree)
  dŒìfs = Measure(Œìfs,degree)
  dŒìin = Measure(Œìin,degree)
  dŒõb1 = Measure(Œõb1,degree)
  dŒõb2 = Measure(Œõb2,degree)
  dŒõj = Measure(Œõj,degree)

  # Normals
  nŒõb1 = get_normal_vector(Œõb1)
  nŒõb2 = get_normal_vector(Œõb2)
  nŒõj = get_normal_vector(Œõj)

  # FE spaces
  reffe = ReferenceFE(lagrangian,Float64,order)
  V_Œ© = TestFESpace(Œ©, reffe, conformity=:H1, vector_type=Vector{ComplexF64})
  V_ŒìŒ∫ = TestFESpace(ŒìŒ∫, reffe, conformity=:H1, vector_type=Vector{ComplexF64})
  V_ŒìŒ∑ = TestFESpace(ŒìŒ∑, reffe, conformity=:H1, vector_type=Vector{ComplexF64})
  U_Œ© = TrialFESpace(V_Œ©)
  U_ŒìŒ∫ = TrialFESpace(V_ŒìŒ∫)
  U_ŒìŒ∑ = TrialFESpace(V_ŒìŒ∑)
  X = MultiFieldFESpace([U_Œ©,U_ŒìŒ∫,U_ŒìŒ∑])
  Y = MultiFieldFESpace([V_Œ©,V_ŒìŒ∫,V_ŒìŒ∑])

  # Weak form
  ‚àá‚Çô(œï) = ‚àá(œï)‚ãÖVectorValue(0.0,1.0)
  a((œï,Œ∫,Œ∑),(w,u,v)) =      ‚à´(  ‚àá(w)‚ãÖ‚àá(œï) )dŒ©   +
  ‚à´(  Œ≤‚Çï*(u + Œ±‚Çï*w)*(g*Œ∫ - im*œâ*œï) + im*œâ*w*Œ∫ )dŒìfs   +
  ‚à´(  Œ≤‚Çï*(u + Œ±‚Çï*w)*(g*Œ∫ - im*œâ*œï) + im*œâ*w*Œ∫ - Œº‚ÇÇ·µ¢‚Çô*Œ∫*w + Œº‚ÇÅ·µ¢‚Çô*‚àá‚Çô(œï)*(u + Œ±‚Çï*w) )dŒìd1    +
  ‚à´(  Œ≤‚Çï*(u + Œ±‚Çï*w)*(g*Œ∫ - im*œâ*œï) + im*œâ*w*Œ∫ - Œº‚ÇÇ‚Çí·µ§‚Çú*Œ∫*w + Œº‚ÇÅ‚Çí·µ§‚Çú*‚àá‚Çô(œï)*(u + Œ±‚Çï*w) )dŒìd2    +
  ‚à´(  ( v*((-œâ^2*d‚ÇÄ + g)*Œ∑ - im*œâ*œï) + a‚ÇÅ*Œî(v)*Œî(Œ∑) ) +  im*œâ*w*Œ∑  )dŒìb1  +
  ‚à´(  ( v*((-œâ^2*d‚ÇÄ + g)*Œ∑ - im*œâ*œï) + a‚ÇÇ*Œî(v)*Œî(Œ∑) ) +  im*œâ*w*Œ∑  )dŒìb2  +
  ‚à´(  a‚ÇÅ * ( - jump(‚àá(v)‚ãÖnŒõb1) * mean(Œî(Œ∑)) - mean(Œî(v)) * jump(‚àá(Œ∑)‚ãÖnŒõb1) + Œ≥*( jump(‚àá(v)‚ãÖnŒõb1) * jump(‚àá(Œ∑)‚ãÖnŒõb1) ) ) )dŒõb1 +
  ‚à´(  a‚ÇÇ * ( - jump(‚àá(v)‚ãÖnŒõb2) * mean(Œî(Œ∑)) - mean(Œî(v)) * jump(‚àá(Œ∑)‚ãÖnŒõb2) + Œ≥*( jump(‚àá(v)‚ãÖnŒõb2) * jump(‚àá(Œ∑)‚ãÖnŒõb2) ) ) )dŒõb2 +
  ‚à´(  (jump(‚àá(v)‚ãÖnŒõj) * k·µ£ * jump(‚àá(Œ∑)‚ãÖnŒõj)) )dŒõj
  l((w,u,v)) =  ‚à´( w*v·µ¢‚Çô )dŒìin - ‚à´( Œ∑d*w - ‚àá‚Çôœïd*(u + Œ±‚Çï*w) )dŒìd1

  # Solution
  op = AffineFEOperator(a,l,X,Y)
  (œï‚Çï,Œ∫‚Çï,Œ∑‚Çï) = solve(op)

  if vtk_output == true
    writevtk(Œ©,filename * "_O_solution.vtu",cellfields = ["phi_re" => real(œï‚Çï),"phi_im" => imag(œï‚Çï)],nsubcells=10)
    writevtk(ŒìŒ∫,filename * "_Gk_solution.vtu",cellfields = ["eta_re" => real(Œ∫‚Çï),"eta_im" => imag(Œ∫‚Çï)],nsubcells=10)
    writevtk(ŒìŒ∑,filename * "_Ge_solution.vtu",cellfields = ["eta_re" => real(Œ∑‚Çï),"eta_im" => imag(Œ∑‚Çï)],nsubcells=10)
  end

  # Postprocess
  xy_cp = get_cell_points(get_fe_dof_basis(V_ŒìŒ∑)).cell_phys_point
  x_cp = [[xy_ij[1] for xy_ij in xy_i] for xy_i in xy_cp]
  Œ∑_cdv = get_cell_dof_values(Œ∑‚Çï)
  p = sortperm(x_cp[1])
  x_cp_sorted = [x_i[p] for x_i in x_cp]
  Œ∑_cdv_sorted = [Œ∑_i[p] for Œ∑_i in Œ∑_cdv]
  xs = [(x_i-xb‚ÇÄ)/Lb for x_i in vcat(x_cp_sorted...)]
  Œ∑_rel_xs = [abs(Œ∑_i)/Œ∑‚ÇÄ for Œ∑_i in vcat(Œ∑_cdv_sorted...)]

  # show(to)
  return (xs,Œ∑_rel_xs)
end
end
